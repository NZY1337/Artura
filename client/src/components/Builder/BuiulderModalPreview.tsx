import { useState, useEffect } from "react";

// components
import Close from "@mui/icons-material/Close";
import GenericModal from "../UtilityComponents/modals/GenericModal";
import Box from "@mui/material/Box";
import Avatar from "@mui/material/Avatar";
import Stack from "@mui/material/Stack";
import Grid from "@mui/material/Grid";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";
import Button from "@mui/material/Button";
import BuilderOptionsPreview from "./BuilderOptionsPreview";

// types
import type { ProjectProps } from "../../types";
interface BuilderModalProps {
    project: ProjectProps;
    open: boolean;
    slideIndex: number;
    handleCloseModal: () => void;
}

const BuilderModalPreview = ({ project, open, handleCloseModal, slideIndex }: BuilderModalProps) => {
    const [previewImage, setPreviewImage] = useState<string | null>(null);
    const imagesUploadedByUser = project?.images.filter((image) => 'url' in image && image.url.includes('uploaded-'));
    const imagesUploadedByAi = project?.images.filter((image) => 'url' in image && !image.url.includes('uploaded-'));

    // image uploaded by user
    const handleMouseEnter = (url: string) => {
        setPreviewImage(url);
    };

    // should be the selected image generated by AI
    const handleMouseLeave = () => {
        if ('url' in imagesUploadedByAi[slideIndex]) {
            setPreviewImage(imagesUploadedByAi[slideIndex].url);
        } 
    };

    useEffect(() => {
        if (open) {
            if ('url' in imagesUploadedByAi[slideIndex]) {
                setPreviewImage(imagesUploadedByAi[slideIndex].url || null);
            } 
        }
    }, [open]);

    return (
        <GenericModal open={open}>
            <Grid container
                sx={(theme) => ({
                    height: "inherit",
                    position: "relative",
                    [theme.breakpoints.down("lg")]: {
                        height: "unset",
                        padding: '0'
                    },
                })}>
                <Grid size={{ xs: 12, md: 12, lg: 6 }}
                    sx={(theme) => ({
                        p: 4,
                        display: "flex",
                        alignItems: "center",
                        [theme.breakpoints.down("lg")]: {
                            padding: '0'
                        },
                    })}>
                    <Box sx={{ position: "relative", width: "100%" }}>
                        <Box component="img" src={previewImage!}
                            sx={{
                                top: 0,
                                left: 0,
                                objectPosition: "right",
                                width: "100%",
                                height: "100%",
                                objectFit: "contain",
                                zIndex: 10,
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center",
                                pointerEvents: "none",
                                maxHeight: {
                                    xs: "30vh",
                                    sm: "500px",
                                    md: "600px",
                                    lg: "700px",
                                },
                            }}>
                        </Box>
                    </Box>
                </Grid>

                <Grid size={{ xs: 12, md: 12, lg: 5 }} sx={{ display: "flex", alignItems: "center", p: 4 }}>
                    <Box>
                        <Stack direction="row" spacing={1} alignItems="center" mb={2}>
                            {imagesUploadedByUser.map((image, idx) => {
                                // Type guard to ensure 'url' exists
                                if ('url' in image && typeof image.url === 'string') {
                                    return (
                                        <Avatar
                                            key={image.url || idx}
                                            variant="rounded"
                                            src={image.url}
                                            onMouseEnter={() => handleMouseEnter(image.url)}
                                            onMouseLeave={handleMouseLeave}
                                            sx={{ width: 80, height: 80, cursor: 'pointer' }}
                                        />
                                    );
                                }
                                return null;
                            })}
                        </Stack>

                        <Typography variant="body2" sx={{ color: "#ccc", mb: 3 }}>
                            {project?.prompt}
                        </Typography>

                        <Divider sx={{ borderColor: "#333", my: 2 }} />

                        <BuilderOptionsPreview
                            builderState={{
                                size: project?.size ,
                                quality: project?.quality,
                                spaceType: "LIVING_ROOM",
                                designTheme: "MODERN",
                                category: "DESIGN_GENERATOR",
                                prompt: project?.prompt,
                                n: 1,
                                outputFormat: "PNG",
                                images: project?.images || [],
                            }}
                        />
                    </Box>
                </Grid>

                <Button sx={{ position: "absolute", top: "5px",  right: "5px", color: "white" }} onClick={handleCloseModal}>
                    <Close />
                </Button>
            </Grid>
        </GenericModal >
    );
};

export default BuilderModalPreview;
