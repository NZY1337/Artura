generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Role {
    admin
    user
}

enum TransactionType {
    JOB_MASK
    CREATE_MASK
    IMAGE_GENERATION
    SUBSCRIPTION
}

enum TransactionStatus {
    SUCCESS
    PENDING
    REFUNDED
}

enum Category {
    DESIGN_GENERATION
    VIRTUAL_STAGING
    LANDSCAPING
}

model User {
    id          String    @id @default(uuid())
    username    String
    email       String    @unique
    role        Role      @default(user)
    credits     Decimal   @default(0)
    freeCredits Int       @default(5)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    Project     Project[]
}

// n, prompt, size, output_format 
model Project {
    id        String   @id @default(uuid())
    userId    String
    prompt    String   @db.Text
    category  Category
    size      String   @db.Text
    quality   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User    @relation(fields: [userId], references: [id])
    images Image[] @relation("ProjectImages")

    imageGenerationResponse ImageGenerationResponse? @relation(name: "ImageGenerationResponse")
}

model ImageGenerationResponse {  
  id           String   @id @default(uuid())
  projectId    String   @unique

  background   String   // 'transparent' | 'opaque' | 'auto'
  outputFormat String   // 'png' | 'webp'
  quality      String   // 'low' | 'medium' | 'high'
  size         String   // '1024x1024', etc.

  inputTokens        Int
  imageTokens        Int
  textTokens         Int
  outputTokens       Int
  totalTokens        Int

  // Calculated fields
  imageCost    Float  // from fixed pricing
  tokenCost    Float  // from tokens
  totalCost    Float  // imageCost + tokenCost

  project Project @relation(fields: [projectId], references: [id], name: "ImageGenerationResponse")
}

model Image {
    id        String @id @default(uuid())
    url       String
    projectId String

    createdAt DateTime @default(now())
    project   Project  @relation("ProjectImages", fields: [projectId], references: [id])
}
